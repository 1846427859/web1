Servlet3.0 新特性
    Shared libraries （共享库）/ runtime plugin ability （运行时插件能力）
    1，Servlet容器启动时会扫描，当前应用里每一个jar包里的
        ServletContainerInitializer 的实现类
    2，提供的 ServletContainerInitializer 实现类
        必须绑定在 MATA-INF/services/javax.servlet.ServletContainerInitializer 中
        文件的内容为 ServletContainerInitializer 实现类的全类名
    总结：容器在启动应用的时候，会扫描当前应用每一个jar包里面的
         MATA-INF/services/javax.servlet.ServletContainerInitializer 文件指定的实现类，并运行 onStartup() 方法
    作用：可以在容器启动时动态的添加Servlet、Filter、Listener等



在Spring中的应用：注解集成SpringMVC
    1，Web容器在启动的时候，会扫描每个jar包下的 META-INFO/services/javax.servlet.ServletContainerInitializer
    2，加载这个文件指定的类 SpringServletContainerInitializer
    3，Spring的应用已启动就会加载感兴趣的 WebApplicationInitializer 接口下的所有类
    4，为所有的 WebApplicationInitializer 实现类创建对象（子类不是接口、不是抽象类）
        1，AbstractContextLoaderInitializer：创建根容器 createRootApplicationContext();
        2，AbstractDispatcherServletInitializer：
            创建一个Web的IOC容器 createRootApplicationContext();
            创建 DispatcherServlet， createDispatcherServlet(servletAppContext);
            将创建的 DispatcherServlet 添加到 ServletAppContext 中
        3，AbstractAnnotationConfigDispatcherServletInitializer：
            创建根容器 createRootApplicationContext();
            获取配置类 getRootConfigClasses();
            注册配置类 context.register(configClasses);

            创建Web容器 createServletApplicationContext()
            获取Web配置类 getServletConfigClasses();
            注册Web配置类 context.register(configClasses);

    总结：
        以注解方式来启动SpringMVC，只需要继承 AbstractAnnotationConfigDispatcherServletInitializer
        实现抽象方法指定 DispatcherServlet 的配置信息

    定制SpringMvc：
